<pre class="mermaid">
    %%{
        init: {
          'theme': 'base',
          "themeVariables": {
          "primaryColor": "#fff",
          "primaryBorderColor": "#646466",
          "tertiaryColor": "#fff"
        }
        }
    }%%
    
    classDiagram

    <% if(!channels.length && !operations.length && !payloads.length && !others.length && !relations.length) { %>
        AsyncAPI
    <% } %>
    
    <% for( let channel of channels){ %>
        class <%= replaceInvalidChars(`CHANNEL_${channel[0]}`) %>["<%= `${channel[0]}` %>"]{
            <%= `<<CHANNEL>>` %>
            <% for( let prop of Object.entries(channel[1])){ 
                let parsedRef = String(prop[1]?.$ref).split('/');  
                %>
                + <%= (Array.isArray(parsedRef))? (parsedRef[parsedRef.length-1]) : typeof prop[1] %> <%= prop[0] %>
            <% } %>
        }
    <% } %>
    <% for( let operation of operations){ %>
        class <%= replaceInvalidChars(`OPERATION_${operation[0]}`) %>["<%= `${operation[0]}` %>"]{
            <%= `<<OPERATION>>` %>
            <% for( let prop of Object.entries(operation[1])){ 
                if(String(prop[0]).toLowerCase() === 'action')  { %>
                + <%= prop[0] %> <%= prop[1] %>
            <% } } %>
        }
    <% } %>
   
    <% for( let payload of payloads){ %>
        class <%= replaceInvalidChars(payload[0]) %>["<%= payload[0] %>"]{
            <%= `<<MESSAGE>>` %>
            <% Object.getOwnPropertyNames(payload[1]).map(prop=>{ %>
                + <%= payload[1][prop].type || typeof payload[1][prop] %> <%= prop %>
            <% }) %>
        }
    <% } %>
  
    <% for( let other of others){ 
        let elements = other[0].split('.');
        %>
        class <%= replaceInvalidChars(other[0]) %>["<%= elements[elements.length-1] %>"]{
            <%= `<<SCHEMA>>` %>
            <% Object.getOwnPropertyNames(other[1]).map(prop=>{ %>
                + <%= other[1][prop].type || typeof other[1][prop] %> <%= prop %>
            <% }) %>
        }
    <% } %>
    <% for( let relation of relations) {  %>
        <%= relation %>
        <% } %>
</pre>

<% function replaceInvalidChars(str) { return str.replaceAll(/[`~!@#$%^&*()|+\-=?;:'",.<>\{\}\[\]\\\/]/gi,"_")} %>